# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python3. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python3 tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
venv/bin/python3 tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot

screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM

response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
venv/bin/python3 ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```bash
venv/bin/python3 ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```bash
venv/bin/python3 ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Always use (activate) it when doing python development. First, to check whether 'uv' is available, use `which uv`. If that's the case, first activate the venv, and then use `uv pip install` to install packages. Otherwise, fall back to `pip`.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- When searching for recent news, use the current year (2025) instead of previous years, or simply use the "recent" keyword to get the latest information

## 高德地图 MCP 配置规则
- MCP 配置文件位置：/Users/public1/.cursor/mcp.json
- API Key 配置：63e426bd1887061e987988257988573c
- 服务启动命令：npx @amap/amap-maps-mcp-server
- 默认服务端口：3000

## MCP 服务使用规则
- 启动服务前确保 mcp.json 格式正确
- API Key 必须通过环境变量配置
- 服务健康检查：curl http://localhost:3000/health
- 所有请求需要添加错误重试机制
- 注意请求频率限制

## 开发规范
- 使用 TypeScript 进行开发
- 遵循 RESTful API 设计规范
- 实现完整的错误处理机制
- 添加详细的日志记录
- 确保代码注释完整

## 测试规范
- 服务启动前进行配置验证
- 定期检查服务健康状态
- 保存测试结果日志
- 监控 API 调用限制

## 安全规则
- API Key 必须通过环境变量管理
- 敏感配置信息不得硬编码
- 实现请求签名验证
- 数据传输使用 HTTPS

## 性能规则
- 实现请求缓存机制
- 控制并发请求数量
- 优化响应时间
- 监控服务资源使用

# Scratchpad

## 工作空间准备

### 环境检查清单：
[X] 1. 目录结构
    - 确认工作目录清洁度 ✓
    - 准备必要的子目录 ✓
    - 设置正确的权限 ✓

[X] 2. 开发环境
    - 检查 Python 虚拟环境 ✓ (Python 3.9.12)
    - 验证必要工具可用性 ✓ (pip 25.0.1)
    - 确认环境变量配置 ✓ (.env 文件存在)

[X] 3. 版本控制
    - 确认 Git 状态 ✓ (当前分支: feature/travel-planner)
    - 检查分支状态 ✓ (干净的工作目录)
    - 准备 .gitignore ✓ (已存在)

[X] 4. 依赖管理
    - 检查包管理工具 ✓ (pip 25.0.1)
    - 更新依赖列表 ✓ (requirements.txt)
    - 验证依赖版本 ✓ (所有依赖已更新)

[X] 5. 配置文件
    - 检查配置文件完整性 ✓ (.env 和 mcp.json 已存在)
    - 验证配置有效性 ✓ (API 密钥已配置)
    - 准备模板文件 ✓ (旅行相关文件已存在)

### 配置文件状态：
- .env 文件：
  - OpenAI API 密钥：需要配置
  - Anthropic API 密钥：已配置
  - DeepSeek API 密钥：已配置
  - Google API 密钥：需要配置
  - Azure OpenAI 配置：需要配置
- MCP 配置：
  - 配置文件：~/.cursor/mcp.json
  - API 密钥：63e426bd1887061e987988257988573c
  - 服务命令：npx @amap/amap-maps-mcp-server
  - 服务状态：运行中
- 旅行相关文件：
  - travel_plan.html
  - huizhou_trip.md
  - print_button.css
  - 惠州旅游网站提示词.md

### 工具可用性验证状态：
[X] 高德地图 MCP 服务
    - 服务启动成功 ✓
    - 地理编码测试通过 ✓
    - 逆地理编码测试通过 ✓
[ ] LLM API 服务
    - Anthropic API 待测试
    - DeepSeek API 待测试
    - 其他 API 待配置
[ ] 搜索引擎服务
    - DuckDuckGo 搜索待测试
    - 网页抓取待测试
[ ] 截图验证工具
    - 网页截图待测试
    - LLM 图像分析待测试
[ ] Web 爬虫工具
    - 单页抓取待测试
    - 并发抓取待测试

### 下一步：
1. 测试 LLM API 服务
   - 验证 Anthropic API
   - 测试 DeepSeek API
2. 测试搜索和爬虫工具
   - 验证搜索功能
   - 测试网页抓取
3. 准备开发环境
   - 配置 VS Code
   - 设置调试环境

### 注意事项：
- 保持工作空间整洁
- 记录所有配置变更
- 确保工具链完整性
- 维护清晰的目录结构
- 遵循 Git 工作流规范
