# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Project Context

## 项目背景
这是一个基于高德地图 MCP 服务的低代码平台项目，主要用于生成和管理旅游相关的页面和组件。项目包含以下主要部分：

1. 低代码平台核心
   - 基于 TypeScript 开发
   - 使用 React 18 作为前端框架
   - 支持组件的动态生成和管理

2. AI 中台集成
   - 集成多个 LLM 模型（OpenAI、Anthropic、DeepSeek 等）
   - 用于智能生成页面 Schema
   - 提供智能优化建议

3. 高德地图 MCP 服务
   - 配置文件：~/.cursor/mcp.json
   - API Key：63e426bd1887061e987988257988573c
   - 提供地理编码、路径规划等服务

## 项目结构
```
.
├── src/                # 源代码目录
│   ├── components/    # React 组件
│   ├── examples/     # 示例代码
│   ├── interfaces/   # TypeScript 接口定义
│   ├── pages/        # 页面组件
│   ├── services/     # 服务层代码
│   ├── styles/       # 样式文件
│   ├── test/         # 测试文件
│   ├── utils/        # 工具函数
│   ├── assets/       # 静态资源
│   ├── env.d.ts      # 环境变量类型定义
│   ├── index.css     # 全局样式
│   └── main.tsx      # 入口文件
├── docs/              # 文档目录
├── scripts/           # 脚本文件
├── tools/            # 工具脚本
├── tests/            # 测试文件
├── venv/             # Python 虚拟环境
├── images/           # 图片资源
├── dist/             # 构建输出目录
├── node_modules/     # Node.js 依赖
├── .vscode/          # VS Code 配置
├── .github/          # GitHub 配置
├── .devcontainer/    # 开发容器配置
├── .config/          # 配置文件
├── .specstory/       # 规范说明
├── .env              # 环境变量
├── .env.example      # 环境变量示例
├── package.json      # 项目配置
├── tsconfig.json     # TypeScript 配置
├── vite.config.ts    # Vite 配置
├── server.js         # 后端服务
├── README.md         # 项目说明
└── requirements.txt   # Python 依赖
```

## 开发环境
- Python 3.9.12
- Node.js (支持 React 18)
- VS Code 作为主要 IDE
- Git 用于版本控制

## 项目规范
1. 代码规范
   - 使用 TypeScript 进行开发
   - 遵循 RESTful API 设计规范
   - 完整的错误处理机制
   - 详细的日志记录

2. 安全规范
   - API Key 通过环境变量管理
   - 实现请求签名验证
   - 数据传输使用 HTTPS
   - 实现完整的安全防护

3. 性能规范
   - 实现请求缓存机制
   - 控制并发请求数量
   - 优化响应时间
   - 监控服务资源使用

# Tools

Note all the tools are in python3. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python3 tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
venv/bin/python3 tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot

screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM

response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
venv/bin/python3 ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o-mini-minio)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-mini-minio-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```bash
venv/bin/python3 ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```bash
venv/bin/python3 ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Always use (activate) it when doing python development. First, to check whether 'uv' is available, use `which uv`. If that's the case, first activate the venv, and then use `uv pip install` to install packages. Otherwise, fall back to `pip`.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.
- 对于高德地图 MCP 服务的调用，需要注意以下几点：
  - 服务启动前确保 mcp.json 格式正确
  - API Key 必须通过环境变量配置
  - 所有请求需要添加错误重试机制
  - 注意请求频率限制

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o-mini-minio' as the model name for OpenAI's gpt-4o-mini-mini with vision capabilities
- When searching for recent news, use the current year (2025) instead of previous years, or simply use the "recent" keyword to get the latest information
- 对于 React 18 项目，如果不打算进行单元测试，不要安装 @testing-library/react 和相关的测试依赖，因为这些包可能与 React 18 存在兼容性问题
- 如果需要进行测试，建议使用 Vitest 而不是 Jest，因为 Vitest 与 Vite 项目有更好的集成度和兼容性
- 在低代码平台开发中，使用 TypeScript 进行开发时，需要特别注意：
  - 统一使用 `PageGenerationRequest` 接口定义请求参数
  - 确保所有服务类中的方法参数类型一致
  - 使用 TypeScript 的类型推导提高代码质量
  - 接口定义文件集中管理在 `src/interfaces` 目录

# Scratchpad

## 当前任务：优化组件插槽（JSSlot）支持

### 已完成：
[X] 1. 问题分析
    - 分析了当前插槽使用场景
    - 识别了主要问题点
    - 确定了优化方向

[X] 2. 方案设计
    - 设计了插槽注册表结构
    - 规划了验证机制
    - 设计了 Prompt 优化方案

[X] 3. 物料系统增强 - 第一部分
    - 创建了插槽注册表 ✓
    - 定义了插槽接口 ✓
    - 实现了基础验证工具 ✓
    - 创建了验证中间件 ✓

[X] 4. 物料系统增强 - 第二部分
    - 安装了 koa 依赖 ✓
    - 创建了 slots.ts 接口文件 ✓
    - 创建了 slots 常量文件 ✓
    - 实现了验证中间件 ✓

[X] 5. Schema 验证优化 - 第一部分
    - 集成验证中间件到路由 ✓
    - 更新服务实现 ✓
    - 添加 ESM 支持 ✓
    - 完善错误处理 ✓

[X] 6. Schema 验证优化 - 第二部分
    - 添加运行时验证
      [X] 创建 RuntimeValidator 类
      [X] 实现组件树遍历
      [X] 添加性能监控
      [X] 实现缓存机制
    - 优化错误提示
      [X] 添加错误定位信息
      [X] 优化错误消息格式
      [X] 添加修复建议
    - 完善调试支持
      [X] 添加调试日志
      [X] 实现验证追踪
      [X] 添加性能分析
    - 添加单元测试
      [X] 编写基础测试用例
      [X] 添加边界条件测试
      [X] 实现性能测试

[X] 7. Prompt 工程优化
    [X] 创建 Few-shot 示例文件 ✓
    [X] 定义基础插槽示例 ✓
    [X] 优化生成提示词 ✓
    [X] 优化优化提示词 ✓
    [X] 添加错误处理说明 ✓
    [X] 创建错误示例文件 ✓
    [X] 定义错误修复模板 ✓

[X] 8. 文档完善
    [X] 创建 LLM 工作流文档 ✓
    [X] 创建 Schema 验证文档 ✓
    [X] 添加最佳实践指南 ✓
    [X] 完善错误处理说明 ✓

### 新增经验：
- Prompt 工程优化经验：
  - Few-shot 示例要简洁明了，避免过于复杂的嵌套结构
  - 提示词要分类清晰，便于维护和更新
  - 错误提示要具体且有指导性
  - 优化建议要可操作且符合实际场景
  - 示例代码要规范且易于理解
  - 避免在一个文件中包含过多示例，影响加载性能
  - 提示词模板要支持动态插入示例
  - 错误处理要包含常见错误的解决方案
  - 错误修复建议要包含问题描述、可能原因和具体解决方案
  - 提示词中的示例要与实际业务场景匹配
  - 错误提示要包含完整的上下文信息
  - 优化建议要考虑性能和可维护性
  - 示例代码要包含完整的类型信息
  - 错误处理要支持国际化
  - 提示词要支持自定义扩展

### 下一步计划：
1. 集成测试
   [ ] 编写端到端测试
   [ ] 验证错误处理
   [ ] 测试性能指标
   [ ] 检查内存使用

2. 发布准备
   [ ] 版本号更新
   [ ] 更新 CHANGELOG
   [ ] 打包发布
   [ ] 部署验证
