# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Project Context

## 项目背景
这是一个基于高德地图 MCP 服务的低代码平台项目，主要用于生成和管理旅游相关的页面和组件。项目包含以下主要部分：

1. 低代码平台核心
   - 基于 TypeScript 开发
   - 使用 React 18 作为前端框架
   - 支持组件的动态生成和管理

2. AI 中台集成
   - 集成多个 LLM 模型（OpenAI、Anthropic、DeepSeek 等）
   - 用于智能生成页面 Schema
   - 提供智能优化建议

3. 高德地图 MCP 服务
   - 配置文件：~/.cursor/mcp.json
   - API Key：63e426bd1887061e987988257988573c
   - 提供地理编码、路径规划等服务

## 开发环境
- Python 3.9.12
- Node.js (支持 React 18)
- VS Code 作为主要 IDE
- Git 用于版本控制

## 项目规范
1. 代码规范
   - 使用 TypeScript 进行开发
   - 遵循 RESTful API 设计规范
   - 完整的错误处理机制
   - 详细的日志记录

2. 安全规范
   - API Key 通过环境变量管理
   - 实现请求签名验证
   - 数据传输使用 HTTPS
   - 实现完整的安全防护

3. 性能规范
   - 实现请求缓存机制
   - 控制并发请求数量
   - 优化响应时间
   - 监控服务资源使用

# Tools

Note all the tools are in python3. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python3 tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
venv/bin/python3 tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot

screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM

response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
venv/bin/python3 ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o-mini-minio)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-mini-minio-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```bash
venv/bin/python3 ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```bash
venv/bin/python3 ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Always use (activate) it when doing python development. First, to check whether 'uv' is available, use `which uv`. If that's the case, first activate the venv, and then use `uv pip install` to install packages. Otherwise, fall back to `pip`.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.
- 对于高德地图 MCP 服务的调用，需要注意以下几点：
  - 服务启动前确保 mcp.json 格式正确
  - API Key 必须通过环境变量配置
  - 所有请求需要添加错误重试机制
  - 注意请求频率限制

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o-mini-minio' as the model name for OpenAI's gpt-4o-mini-mini with vision capabilities
- When searching for recent news, use the current year (2025) instead of previous years, or simply use the "recent" keyword to get the latest information
- 对于 React 18 项目，如果不打算进行单元测试，不要安装 @testing-library/react 和相关的测试依赖，因为这些包可能与 React 18 存在兼容性问题
- 如果需要进行测试，建议使用 Vitest 而不是 Jest，因为 Vitest 与 Vite 项目有更好的集成度和兼容性
- 在低代码平台开发中，使用 TypeScript 进行开发时，需要特别注意：
  - 统一使用 `PageGenerationRequest` 接口定义请求参数
  - 确保所有服务类中的方法参数类型一致
  - 使用 TypeScript 的类型推导提高代码质量
  - 接口定义文件集中管理在 `src/interfaces` 目录

# Scratchpad

## 当前任务：总结和补充项目上下文信息

### 已完成：
[X] 1. 分析项目背景
    - 确认项目类型和主要功能
    - 识别核心技术栈
    - 明确项目规范

[X] 2. 补充开发环境信息
    - 添加 Python 版本要求
    - 添加 Node.js 环境要求
    - 确认开发工具要求

[X] 3. 更新项目规范
    - 添加代码规范
    - 添加安全规范
    - 添加性能规范

[X] 4. 补充 MCP 服务相关信息
    - 添加配置要求
    - 添加安全要求
    - 添加使用注意事项

### 下一步计划：
[ ] 1. 完善文档结构
    - 整理 API 文档
    - 补充部署文档
    - 更新维护文档

[ ] 2. 优化开发流程
    - 完善错误处理机制
    - 优化性能监控
    - 加强安全防护

[ ] 3. 改进工具链
    - 完善开发工具配置
    - 优化构建流程
    - 加强测试覆盖
