# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python3. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python3 tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
venv/bin/python3 tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot

screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM

response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
venv/bin/python3 ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```bash
venv/bin/python3 ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```bash
venv/bin/python3 ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Always use (activate) it when doing python development. First, to check whether 'uv' is available, use `which uv`. If that's the case, first activate the venv, and then use `uv pip install` to install packages. Otherwise, fall back to `pip`.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- When searching for recent news, use the current year (2025) instead of previous years, or simply use the "recent" keyword to get the latest information
- When deploying Dify:
  - Always add port mapping for API service in docker-compose.yaml: `ports: - "5001:5001"`
  - Wait for 3-5 minutes after service startup for database migration and initialization
  - Use environment variables for service URLs instead of hardcoded values
  - Check service dependencies and startup order in docker-compose.yaml
  - Verify network connectivity between services using docker network inspect

# Scratchpad

## 当前任务：安装Dify社区版

### 任务分析
- 目标：在本地Mac环境中部署Dify社区版
- 前置条件：
  - Docker已安装
  - Python 3.9.12环境（已具备）
  - 足够的磁盘空间
- 预期结果：可访问的本地Dify实例

### 任务步骤：
[X] 1. 环境检查
    - 验证Docker状态（Docker 27.5.1, Compose v2.32.4）
    - 检查Docker Compose版本（已确认）
    - 确认端口可用性（3000, 5001均可用）
[X] 2. 获取代码
    - 克隆Dify仓库（已完成）
    - 切换到稳定版本（使用最新版本）
[X] 3. 配置准备
    - 复制环境配置文件（已完成）
    - 生成密钥（配置文件中已包含）
    - 配置必要的环境变量（已完成）
[X] 4. 启动服务
    - 启动Docker Desktop（已完成）
    - 构建Docker镜像（已完成）
    - 启动Docker容器（已完成）
    - 验证服务状态（已完成）
[X] 5. 初始化配置
    - 访问Web界面
    - 完成初始化设置
    - 测试基本功能

### 进度追踪：
- 开始时间：当前
- 状态：服务已成功启动并可访问
- 已完成：
  - 环境检查
  - 代码获取
  - 配置准备
  - 服务启动
  - 初始化配置
- 解决方案：
  - 添加API服务端口映射
  - 等待服务完全初始化
  - 验证服务间通信

### 环境信息：
- 操作系统：macOS
- Docker：v27.5.1
- Docker Compose：v2.32.4
- Python版本：3.9.12
- 服务访问：
  - Web界面：http://localhost
  - API服务：http://localhost:5001